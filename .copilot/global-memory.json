{"type":"entity","entityType":"system_configuration","name":"Memory System Configuration","observations":["Two-tier memory system: global-memory and workspace-level memory","Global-memory: shared across all workspaces, only save when explicitly requested","Workspace-level memory: default for workspace-specific information","Always check both memories when available before making decisions","Global memory location: ${userHome}/.copilot/global-memory.json"]}
{"type":"entity","entityType":"user_preferences","name":"User Preferences","observations":["Prefers selective use of global memory - only when explicitly requested","Workspace-specific information should stay in workspace-level memory by default","Values proper memory hierarchy and organization","Local MCP Server Setup: Configure workspace-level memory server with path '${workspaceFolder}/.vscode/memory.json'","Project setup should include both VS Code configuration and local memory server configuration","UPDATED Project Setup Protocol: Memory file (.vscode/memory.json) should be completely empty, not an empty JSON object","MCP configuration should use ${workspaceFolder}/.vscode/memory.json for MEMORY_FILE_PATH variable","Project Setup Protocol: When setting up new projects, create .vscode/settings.json as empty object {} - DO NOT add extension recommendations unless explicitly requested","Only add content to settings.json when specifically asked by the user","Keep project setup minimal and only include what's necessary for the memory server configuration","Project Setup Protocol Enhancement: When initializing a project without specifications, ask what type of project blueprint to use","Python Project Blueprint: 1) Create devbox environment with 'devbox init' 2) Add uv package with 'devbox add uv' 3) Initialize uv project with 'uv init' prompting for project details (name, version, package vs application, etc.)","Always prompt user for project specifications when using uv init"]}
{"type":"entity","name":"MCP Memory Server Setup","entityType":"Configuration","observations":["MCP memory server setup requires creating .vscode/mcp.json configuration file","Correct server name should be descriptive like 'workspace-memory' for clarity","Command to run: npx -y @modelcontextprotocol/server-memory","Required environment variable: MEMORY_FILE_PATH (not MEMORY_FILE)","Memory file should be created as .vscode/memory.json and initialized as empty JSON object {}","Configuration structure: servers object containing server definitions with command, args, and env properties"]}
{"type":"entity","name":"VS Code MCP Configuration","entityType":"File Structure","observations":["MCP configuration file location: .vscode/mcp.json","Root property name: 'servers' (not 'mcpServers')","Each server needs: command, args array, and optional env object","Memory file path should be relative to workspace root: .vscode/memory.json"]}
{"type":"entity","name":"MCP Memory Server Environment Variables","entityType":"Configuration","observations":["Correct environment variable name: MEMORY_FILE_PATH","Common mistake: using MEMORY_FILE instead of MEMORY_FILE_PATH","Path should be relative to workspace: .vscode/memory.json","Memory file must exist and be valid JSON, starting with empty object {}","UPDATED: Use ${workspaceFolder}/.vscode/memory.json for MEMORY_FILE_PATH instead of relative path","This ensures proper path resolution in VS Code environment","Memory file should be completely empty (not even empty JSON object {})"]}
{"type":"entity","entityType":"Development Preference","name":"User Development Preferences","observations":["Always use 'devbox run' to execute commands when working in projects that contain a devbox.json file","This ensures consistent development environment and proper dependency management","Recorded on June 2, 2025","Successfully used for talosctl etcd snapshot backup creation","When using devbox run commands, always use the pattern: devbox run \"cd target_directory && command\" because devbox opens in the root folder","This pattern applies to ANY usage of devbox run, not just Pulumi-specific commands","Example: devbox run \"cd iac && pulumi stack ls\" instead of just devbox run pulumi stack ls","This is critical for proper directory context when running commands through devbox","When debugging Pulumi Container Apps with Key Vault secret references, encountered serialization issues where secret references couldn't be properly serialized during pulumi preview","Debugging approach: Temporarily comment out Container Apps resources in Pulumi code to isolate and validate base infrastructure (Key Vault, PostgreSQL, managed identity, role assignments) first","Container Apps secret reference pattern that caused issues: secrets=[{'name': secret_name, 'keyVaultUrl': secret_reference.secret_uri, 'identity': managed_identity.client_id}]","Successfully validated base infrastructure without Container Apps using pulumi preview via devbox run pattern","Next step after base validation: Re-enable Container Apps with corrected secret reference serialization approach"]}
{"type":"entity","entityType":"Memory System Guidelines","name":"MCP Memory Server Usage Rules","observations":["CRITICAL: Always distinguish between global-memory and workspace-memory servers","global-memory: Used for cross-project preferences and global settings (stored in ${userHome}/.copilot/global-memory.json)","workspace-memory: Used for project-specific information and procedures (stored in workspace .vscode/memory.json)","When user says 'workspace-memory' - use f1e_ prefixed functions for workspace-specific content","When user says 'global-memory' - use bb7_ prefixed functions for global/cross-project content","Example: DevBox preferences should go in global-memory (applies to all projects)","Example: Kubernetes backup procedures should go in workspace-memory (specific to current project)","Recorded June 2, 2025 - Critical to follow this distinction"]}
{"type":"entity","name":"Python Project Blueprint","entityType":"Project Setup Protocol","observations":["Complete Python project setup using devbox and uv","Step 1: Initialize devbox environment with 'devbox init'","Step 2: Add uv package with 'devbox add uv'","Step 3: Initialize uv project with step-by-step communication","Required prompts for uv init: project name, project type (app/lib/package/script), description preference, Python version, build backend, VCS preference, author information","Final structure includes: devbox.json, pyproject.toml, main.py, .python-version, .vscode/ with memory server","Always use 'devbox run' prefix for commands when devbox.json exists","Use step-by-step communication approach for gathering user preferences"]}
{"type":"entity","entityType":"Command Sequence","name":"Python Blueprint Commands","observations":["1. devbox init (creates devbox.json with basic structure)","2. devbox add uv (adds uv package to devbox.json)","3. devbox run uv init --name [project-name] --[type] [options] (initializes Python project)","Common uv init options: --app, --lib, --package, --script, --no-description, --vcs none/git, --author-from git/auto/none","Example: devbox run uv init --name photos-chloe --app --no-description --vcs none --author-from git","Results in: pyproject.toml, main.py, .python-version files","Always prompt user for each option in step-by-step manner"]}
{"type":"relation","from":"MCP Memory Server Setup","to":"VS Code MCP Configuration","relationType":"requires"}
{"type":"relation","from":"MCP Memory Server Setup","to":"MCP Memory Server Environment Variables","relationType":"uses"}
{"type":"relation","from":"VS Code MCP Configuration","to":"MCP Memory Server Environment Variables","relationType":"configures"}
{"type":"relation","from":"Python Project Blueprint","to":"Python Blueprint Commands","relationType":"uses"}
{"type":"relation","from":"Python Project Blueprint","to":"User Preferences","relationType":"follows"}